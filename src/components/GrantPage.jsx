import { useState, useEffect, useRef, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { logOutUser } from "@/toolkits/userToolkit";
import { toast } from "sonner";

// Composant de loading par d√©faut
const DefaultLoader = () => (
  <div className="flex items-center justify-center min-h-screen">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
  </div>
);

const GrantPage = ({
  allowedRoles = [],
  component: Component,
  componentProps = {},
  children,
  isPublic = false,
  loadingComponent: LoadingComponent = DefaultLoader,
}) => {
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const navigate = useNavigate();

  // ‚úÖ SOLUTION 1: Utiliser des refs pour √©viter les re-renders en boucle
  const initialCheckDone = useRef(false);
  const currentUserRef = useRef(null);

  // ‚úÖ SOLUTION 2: M√©moriser allowedRoles pour √©viter les changements de r√©f√©rence
  const memoizedAllowedRoles = useMemo(
    () => allowedRoles,
    [allowedRoles?.join(",")]
  );

  // Fonction pour r√©cup√©rer l'utilisateur depuis localStorage
  const getCurrentUser = () => {
    try {
      const userData = localStorage.getItem("lsd_user");
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error("Erreur lecture localStorage:", error);
      return null;
    }
  };

  // Fonction pour v√©rifier les autorisations
  const checkAuthorization = (user) => {
    //
    if (user && user?.level === "admin") {
      return true;
    }
    // Route publique : toujours autoris√©e
    if (isPublic) {
      return true;
    }

    // Si pas d'utilisateur connect√© : non autoris√©
    if (!user) {
      return false;
    }

    // Si pas de r√¥les sp√©cifi√©s : autoris√© par d√©faut (pour compatibilit√©)
    if (!memoizedAllowedRoles || memoizedAllowedRoles.length === 0) {
      return true;
    }

    // V√©rifier si le r√¥le de l'utilisateur est dans la liste autoris√©e
    return memoizedAllowedRoles.includes(user.role);
  };

  // Fonction de gestion de l'autorisation
  const handleAuthorization = async (user) => {
    const authorized = checkAuthorization(user);

    if (!authorized && !isPublic) {
      // Si utilisateur connect√© mais non autoris√© : logout + redirection
      if (user) {
        toast.error("Acc√®s non autoris√©. D√©connexion en cours...");
        try {
          await logOutUser();
        } catch (error) {
          console.error("Erreur logout:", error);
        }
      } else {
        toast.error("Connexion requise");
      }

      navigate("/unauthorized");
      return;
    }

    // ‚úÖ Mettre √† jour les refs ET les states
    currentUserRef.current = user;
    setIsAuthorized(authorized);
    setCurrentUser(user);
    setIsLoading(false);
  };

  // Fonction de d√©tection des changements suspects
  const detectSuspiciousChanges = (oldUser, newUser) => {
    if (!oldUser || !newUser) return false;

    // V√©rifier les changements critiques
    const criticalFields = ["role", "level", "status", "id", "uid"];

    return criticalFields.some((field) => {
      const oldValue = oldUser[field];
      const newValue = newUser[field];

      // Comparaison stricte pour d√©tecter les modifications
      if (Array.isArray(oldValue) && Array.isArray(newValue)) {
        return JSON.stringify(oldValue) !== JSON.stringify(newValue);
      }

      return oldValue !== newValue;
    });
  };

  // ‚úÖ SOLUTION 3: S√©parer la v√©rification initiale du monitoring

  // useEffect pour la v√©rification INITIALE uniquement
  useEffect(() => {
    console.log("üöÄ GrantPage: V√©rification initiale");

    const user = getCurrentUser();
    handleAuthorization(user);
    initialCheckDone.current = true;

    console.log("‚úÖ GrantPage: V√©rification initiale termin√©e");
  }, []); // ‚úÖ PAS DE D√âPENDANCES - ex√©cut√© une seule fois

  // useEffect s√©par√© pour le MONITORING des changements localStorage
  useEffect(() => {
    if (!initialCheckDone.current) {
      return; // Attendre que la v√©rification initiale soit termin√©e
    }

    console.log("üîÑ GrantPage: Configuration monitoring localStorage");

    // Event listener pour les changements localStorage (cross-tab)
    const handleStorageChange = (event) => {
      console.log("üì° Storage change d√©tect√©:", event.key, event.newValue);

      // V√©rifier si c'est lsd_user qui a chang√©
      if (event.key === "lsd_user") {
        const newUser = event.newValue ? JSON.parse(event.newValue) : null;

        // Si l'utilisateur actuel existe, v√©rifier les changements suspects
        if (currentUserRef.current) {
          const hasSuspiciousChanges = detectSuspiciousChanges(
            currentUserRef.current,
            newUser
          );

          if (hasSuspiciousChanges) {
            toast.error(
              "Modification non autoris√©e d√©tect√©e. D√©connexion s√©curis√©e..."
            );
            console.warn("Changements suspects d√©tect√©s dans lsd_user:", {
              old: currentUserRef.current,
              new: newUser,
            });

            // Effacer le localStorage et d√©connecter
            localStorage.removeItem("lsd_user");
            localStorage.removeItem("lsd_all_users");

            // D√©connexion et redirection vers login
            logOutUser()
              .then(() => {
                navigate("/login");
              })
              .catch((error) => {
                console.error("Erreur logout apr√®s changement suspect:", error);
                navigate("/login");
              });

            return;
          }
        }

        // Si pas de changements suspects, re-v√©rifier les autorisations
        handleAuthorization(newUser);
      }

      // Si lsd_user a √©t√© supprim√©
      if (event.key === "lsd_user" && event.newValue === null) {
        if (currentUserRef.current && !isPublic) {
          toast.info("Session ferm√©e");
          navigate("/login");
        }
      }
    };

    // Event listener pour les changements directs (non cross-tab)
    const handleDirectStorageChange = () => {
      const newUser = getCurrentUser();

      if (currentUserRef.current) {
        const hasSuspiciousChanges = detectSuspiciousChanges(
          currentUserRef.current,
          newUser
        );

        if (hasSuspiciousChanges) {
          toast.error(
            "Modification non autoris√©e d√©tect√©e. D√©connexion s√©curis√©e..."
          );

          localStorage.removeItem("lsd_user");
          localStorage.removeUser("lsd_all_users");

          logOutUser()
            .then(() => {
              navigate("/login");
            })
            .catch((error) => {
              console.error("Erreur logout apr√®s changement suspect:", error);
              navigate("/login");
            });

          return;
        }
      }

      // √âviter les re-checks inutiles si l'utilisateur n'a pas chang√©
      if (JSON.stringify(currentUserRef.current) !== JSON.stringify(newUser)) {
        handleAuthorization(newUser);
      }
    };

    // Polling p√©riodique pour d√©tecter les changements directs
    const pollInterval = setInterval(handleDirectStorageChange, 2000); // R√©duit √† 2s

    // Ajouter les event listeners
    window.addEventListener("storage", handleStorageChange);

    console.log("‚úÖ GrantPage: Monitoring configur√©");

    // Cleanup
    return () => {
      console.log("üßπ GrantPage: Nettoyage monitoring");
      window.removeEventListener("storage", handleStorageChange);
      clearInterval(pollInterval);
    };
  }, [isPublic, navigate]); // ‚úÖ SEULEMENT les d√©pendances qui ne changent pas souvent

  // ‚úÖ SOLUTION 4: Re-v√©rifier les autorisations si allowedRoles change
  useEffect(() => {
    if (!initialCheckDone.current) return;

    console.log("üîÑ GrantPage: R√¥les autoris√©s ont chang√©, re-v√©rification");
    const user = getCurrentUser();
    handleAuthorization(user);
  }, [memoizedAllowedRoles]); // ‚úÖ Seulement si les r√¥les changent

  // Affichage conditionnel
  if (isLoading) {
    return <LoadingComponent />;
  }

  // Route publique ou autoris√©e : afficher le composant
  if (isPublic || isAuthorized) {
    // Si children est fourni, l'utiliser (plus flexible pour les props)
    if (children) {
      return children;
    }

    // Sinon, utiliser le component avec les props
    return Component ? <Component {...componentProps} /> : null;
  }

  // Par s√©curit√©, ne rien afficher si pas autoris√©
  return null;
};

export default GrantPage;
